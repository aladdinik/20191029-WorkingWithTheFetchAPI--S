<======HTML======>


<======CSS======>


<======JAVASCRIPT======>
1- Constructor Function using .defineProperties() for getter and setter.
2- Constructor Function using .defineProperties() for getter and setter.
3- Detects touchscreen on mobiles.


1**
/* Constructor Function using .defineProperties() for getter and setter.
+\ ideal for setting getter and setter on properties for constructor function so that all the constructor object you create will get the same result. */

const iKconsFunction1 = function ( {iKpar1, iKpar2, iKpar3} = {} ) {
	this.iKconsFuncProp1 = iKpar1;
}; /*END iKconsFunction1 */

Object.defineProperties(
	iKconsFunction1.prototype,
	{
		"iKconsFuncProp1": {
			get: () => this.iKconsFuncProp1 || "iKgetDefault1",
			set: iKsetPar1 => this.iKconsFuncProp1 = iKsetPar1,
			enumerable: true,
			configurable: true
		}
); /*END Object.defineProperties() */

const iKconsObject1 = new iKconsFunction1({iKpar1: "iKarg1", iKpar2: "iKarg2", iKpar3: "iKarg3"});

	/*+\ if you know you will not need the constructor object arguments than it is not required declaring the property in th constructor function if you do not need it.
	+\ all the settings are good, only adjust the names/values/setter function.
		+\ unless you need to change something. */


+++++++++++++++++++++++++++++++++++++++++++++++++++++

2**
/* Constructor Function using .defineProperties() for getter and setter.
+\ ideal for setting getter and setter on properties for specified constructor object so that the constructor function and other additional constructor object will not be affected. */
	
const iKconsFunction1 = function () {}; /*END iKconsFunction1 */

const iKconsObject1 = new iKconsFunction1();

Object.defineProperties(
	iKconsObject1,
	{
		"iKconsFuncProp1": {
			get: () => this.iKconsFuncProp1 || "iKgetDefault1",
			set: iKsetPar1 => this.iKconsFuncProp1 = iKsetPar1,
			enumerable: true,
			configurable: true
		}
	}
); /*END Object.defineProperties() */

	/*+\ optionally you can declare the property inside the constructor function prior the .defineProperties() and omit the enumerable: and configurable:, you can decide that.
		+\ but you must set a value inside the property, otherwise it will not work.
			+\ minimumly it can be this.iKconsFuncProp1 = undefined; but as long as it has a value.
	+\ beware any arguments you pass through the iKconsObject1 will be overwritten if you use getter and setter.
		+\ only reassignment is allowed with getter and setter.
	+\ all the settings are good, only adjust the names/values/setter function.
		+\ unless you need to change something. 
		+\ of course you can still use properties as normal if you do not want to set getter and setter on it.*/
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++

3**
/* Detects touchscreen on mobiles.
+\ you could use this for mobile first approach if you want. */	
	
/* touch screen detection*/
var isTouchDevice = 'ontouchstart' in document.documentElement; /*1+*/

if (isTouchDevice) {   /*2+*/
	/* 2 options: 
	1- you insert your touch device dependent code here.
	2- or you could remove a class that you place on the <body class="no-touch">...</body> */
};

console.log(isTouchDevice); /*OP false */ /*3+*/

	/*1+ 'ontouchstart' is a touch event in javascript.
	2+ use the if statement to write your code.
	3+ but will become true if touchscreen is detect like on a mobile. */

+++++++++++++++++++++++++++++++++++++++++++++++++++++

4**
/*possible catch for error with promise object, it could tell which promise is faulty.
+\ from javascript.info but I do not know if I should use this. Only ideal if you are using .catch() sparingly with promise object. */

window.addEventListener('unhandledrejection', function(event) {
  // the event object has two special properties:
  alert(event.promise); // [object Promise] - the promise that generated the error
  alert(event.reason); // Error: Whoops! - the unhandled error object
});

new Promise(function() {
  throw new Error("Whoops!");
}); // no catch

	/*ik 20191016 = keeping but not sure if I should add this to my template just yet */

